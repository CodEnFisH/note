lecture https://canvas.instructure.com/courses/830518
https://www.youtube.com/playlist?list=PL700757A5D4B3F368


Finished Lecture 1. Unit 1.

Lecture 1.1
 1.Two general problem: cannot be solved, on unreliable link.
 2.atomic broadcast <=> consensus.
Lecture 1.2 
 1. core problems: concensus, broadcast, leader election.
 
Lecture 2.0 Formal modeling system.
1. Modeling: different types of models: 
   a. discrete event models:
      Ofen described by state transition system: system evolves, moving from one state to another at discrete time steps.
   b. continuous models
      Often discribed by differential equations involving variables which can take real values.
2. Granularity of models.
   
Lecture 2.1 
1. What is distributed system? 
   a. bunch of nodes/processes
   b. sending messages over a network
   c. to solve a common goal (algorithm)
2. MOdeling a node.
  a. a single node has a bunch of neihbors: can send and recv mesgs. can do local computations.
  b. Model node by STATE TRANSITION SYSTEM (STS): like a finite state macine, except need not be finite, no input.
3. State Transition System (informal)
  a. a state transition system consists  of a set of states; rule for which state to go to from each state. (transition function/
    binary relation); the set of starting states (initial states)
  b. example,  
     States {X0,X1,X2,X1'}
     Transition function: {X0->X1, X1->X2, X2->X1'}
     Initial states{X0}
  c. transition functions.
     State of note is triple  <s, I, O>  state, input buffer, output buffer.
     f(si, Ii, Oi) ->  (Si+1, Ii_1, Oi+1)
     Remove at one msg m from input buffer. 
4. single node perspective:
   a. wait for message.
   b. upon received msg, do local computation. send some mesg
   c. goto 1
5. Distributed
   Configuration, snapshot. state of each nodem p1, p2, p3
   compute event: comp(i), delivery event (i,j,m)
   
Lecture 2.2 Asynchronous & synchronous system
 1. Execution
 2. Applicability of events.
   if e is an event applicable to configuration c, then app(e,c) gives the new configuration after the event e.
 3. Asynchronous model:
    Our processes are deterministic. Non-determinism comes from asynchrony.
 4. Schedules (async modle):
    a. A SCHEDULE is the sequence of events:
      Message asynchrony determined by del(i,j,m);
      Process speeds determined by comp(i)
      All non-determinism embedded in schedule!
    b. given the initial configuration, the schedule terrmines the whole execution.
 5. Admissible execution in the async model.
    Admissible if : each process has infinit number of comp(i); each applicable comp(i) is eventually performed.
                    each applicable del(i,j,m) is eventually performed.
 6. Lockstep execution.
 7 Synchronous system: Execution partitioned into disjoint rounds.
   Round 1: Deliver all mesgs, Perform comput steps in all processes,
   Round 2: Deliver all mesgs, perform compute steps in all processes.
   
Lecture 2.3 Time Order of events in async system.
1. Order of events.
2. Causally order.   <H  called causal order. it is transitive.
   two events , a and b, are concurrent if not a <h b and not b<H a
3. Similarity of executions. 
4. Computations. Computation theorem.
5. Equivalence of executions. F~E : F and E are similar executions. As long as causality is perserved.
6. Two important results:
   Result1: There is no algorithm which can observe the ORDER of the sequence of events for all executions.
   Result2: The computation therom dos not hold if the model is extended such that each process can read a local hardare clock.
  
Lecture 2.4 Logical clock.

1. Causally order.
2. Lamport clock.
   a On each event update t:
     t = max(t, tq) + 1 (delivery) when receive message with timestamp (tq, q)
     t = t + 1 for every transtion (comp)
   b. comparing two timestamps. 
      (5, p5) < (7, p2) , (4, p2) < (4, p3)
3. vector clock.
  p1:   [1,0,0]  [2, 0 0], [3, 0 0]      [4,0,0]
                                  \
  p2                              [3,1,0]     [3,2,0]
                                                     \
  p3         [0,0,1],                                  [3,2,2] 
