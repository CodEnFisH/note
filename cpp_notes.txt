http://channel9.msdn.com/Events/GoingNative/GoingNative-2012?so

cpu cache
http://vimeo.com/97337258

cpp notes:

1. use map maitain shared_ptr
  for example
    shared_ptr a = new (A);
    map[obj_1] = a;
    
    later delete it when closed
    
    if closed
      map.erase[obj_1];
      
    don't do this way, it will cause crash.
    
    shared_ptr a = new(A);
    map[obj_1] = a.get();
    

2. cpp primier 5 reading notes http://blog.csdn.net/totuswhf/article/category/1878951/2

3. cpp primer notes:

chapter2:
  const, reference, c++ "using" define const 
chapter 3:
  3.3 vector: 
    A vector is a class template.
    c++11 way: vector<string> articles = {"a", "an", "the"};
  3.5.1 Understanding Complicated Array Declarations
    int (*Parray)[10] = &arr; //  Parray points to an array of ten ints
    int (&arrRef)[10] = arr;  //  arrRef refers to an array of ten ints
    
    Reading the definition of Parray from right to left isnâ€™t as helpful. Because the array dimension follows the name being declared, 
    it can be easier to read array declarations from the inside out rather than from right to left. 
    Reading from the inside out makes it much easier to understand the type of Parray. We start by observing that the parentheses 
    around *Parray mean that Parray is a pointer. Looking right, we see that Parray points to an array of size 10. Looking left, 
    we see that the elements in that array are ints. Thus, 
    Parray is a pointer to an array of ten ints. Similarly, (&arrRef) says that arrRef is a reference. 
    The type to which it refers is an array of size 10. That array holds elements of type int.
    
  Finished chapter 1,2,3
  
  skip chapters inbetween now. Start from chapter 12
  
  Finished chapter 12. Allocator class is really weird.
  Finished chapter 8. i/o.
